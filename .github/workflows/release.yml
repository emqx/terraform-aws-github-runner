name: Release
on:
  push:
    tags:
      - v*
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 0'

jobs:
  lambdas:
    name: Build lambdas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Build lambdas dist
        env:
          OUTPUT_DIR: lambda_output
        run: .ci/build.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: lambdas
          path: lambda_output/*.zip
          retention-days: 7

  ami:
    name: Build AMI
    runs-on: ubuntu-latest
    container:
      image: index.docker.io/hashicorp/packer@sha256:297bbbbbbf3ce9e0431ac1e8f02934b20e1197613f877b55dfdb1ebfd94eb748 # ratchet:index.docker.io/hashicorp/packer:1.8.6
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Build AMI
        working-directory: images/emqx-${{ matrix.arch }}
        env:
          AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          packer init .
          packer build github_agent.pkr.hcl

  deploy:
    name: Deploy
    needs:
      - ami
      - lambdas
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.5.3

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Download artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: lambdas
          path: lambda_output
          merge_multiple: true
      - name: Deploy
        working-directory: emqx
        env:
          AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_github_app_id: ${{ secrets.APP_ID }}
          TF_VAR_github_app_key_base64: ${{ secrets.APP_KEY_BASE64 }}
        run: |
          terraform init
          terraform refresh
          terraform apply -auto-approve

  ami-gc:
    name: Deregister oldest AMI
    runs-on: ubuntu-latest
    needs:
      - ami
      - deploy
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Deregister oldest AMI
        env:
          AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --filters "Name=name,Values=github-runner-${{ matrix.arch }}-*" \
            --query 'sort_by(Images, &CreationDate)[*].[ImageId]' \
            --output text | head -n 1)
          aws ec2 deregister-image --image-id $AMI_ID
          aws ec2 describe-snapshots \
            --filters "Name=description,Values=*$AMI_ID*" \
            --query 'Snapshots[*].[SnapshotId]' \
            --output text | xargs aws ec2 delete-snapshot --snapshot-id
